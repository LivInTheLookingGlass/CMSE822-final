
///////////////////////////////////////////////////////////////////////
// 2D Advection Equation
// Carolyn Wendeln
// 10/24/2021
///////////////////////////////////////////////////////////////////////


#include <iostream>
using std::cout; using std::endl;
#include<cmath>

//at + (ua)x + (va)y = 0

///////////////////////////////////////////////////////////////////////
// Output Array Functions
///////////////////////////////////////////////////////////////////////

	

///////////////////////////////////////////////////////////////////////
// Main Function
///////////////////////////////////////////////////////////////////////

int main () {

	//////////////////////////////////////////////////////////////////
	//Input Data
	//////////////////////////////////////////////////////////////////

	double dist_start = 0;
	double dist_end = 1;
	int N = 100;
	double delta_dist = (dist_end-dist_start) / (N-1);

	double t_start = 0;
	double t_end = 10;
	int n = 100;
	double delta_t = (t_end-t_start) / (n-1);

	double u = 0.1;

	//////////////////////////////////////////////////////////////////
	//Generate Arrays
	//////////////////////////////////////////////////////////////////
  
  	double dist_x[N];
 	double dist_y[N];

  	double temp[N][N];
 	double a_read[N][N];
	double a_write[N][N];

	//////////////////////////////////////////////////////////////////
	//Initialize Arrays
	//////////////////////////////////////////////////////////////////

  	for(int i=0; i<(N); ++i)
  	{
  		dist_x[i] = dist_start + delta_dist * i;
  		dist_y[i] = dist_start + delta_dist * i;
  	}


  	// Initial condition
	for(int i=0; i<(N-1); ++i)
  	{
  		for(int j=0; j<(N-1); ++j)
  		{
  			a_read[i][j] = exp(-1 * (pow(dist_x[i] - 0.5,2) + pow(dist_y[j] - 0.5,2)) * 50.0);
  		}
 	 }

	//////////////////////////////////////////////////////////////////
	//Apply Advection Equation
	//////////////////////////////////////////////////////////////////
  	

 	//periodic domain
	//special cases for first/last row/coloumn


 	//if i = 0


  	//bulk
	for(int i=1; i<(N-2); ++i)
  	{
  		for(int j=1; j<(N-2); ++j)
  		{
  			a_write[i][j] = a_read[i][j] - ((((u * delta_t) / (2 * delta_dist))) * (((a_read[i+1][j] - a_read[i-1][j])) + ((a_read[i][j+1] - a_read[i][j-1]))));
  		}
  	}

	//last case



}

